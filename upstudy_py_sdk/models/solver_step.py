# coding: utf-8

"""
    api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from upstudy_py_sdk.models.solver_description import SolverDescription
from typing import Optional, Set
from typing_extensions import Self

class SolverStep(BaseModel):
    """
    SolverStep
    """ # noqa: E501
    children: Optional[List[SolverStep]] = Field(default=None, description="Sub-steps, supplementing how this step is calculated to reach the next step")
    description: Optional[SolverDescription] = Field(default=None, description="Description of the current step")
    image_url: Optional[StrictStr] = Field(default=None, description="If the current step is drawing, this URL shows the drawing result")
    latex: Optional[StrictStr] = Field(default=None, description="Latex display of the current step")
    __properties: ClassVar[List[str]] = ["children", "description", "image_url", "latex"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SolverStep from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item_children in self.children:
                if _item_children:
                    _items.append(_item_children.to_dict())
            _dict['children'] = _items
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SolverStep from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "children": [SolverStep.from_dict(_item) for _item in obj["children"]] if obj.get("children") is not None else None,
            "description": SolverDescription.from_dict(obj["description"]) if obj.get("description") is not None else None,
            "image_url": obj.get("image_url"),
            "latex": obj.get("latex")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
SolverStep.model_rebuild(raise_errors=False)

